def PIPELINE_ID = "${env.BUILD_NUMBER}"

def getImageTag() {
    def dateFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
    def currentDate = new Date()
    return dateFormat.format(currentDate)
}

podTemplate(
    label: "${PIPELINE_ID}",
    serviceAccount: 'jenkins',
    containers: [
        containerTemplate(name: 'podman', image: "mgoltzsche/podman", ttyEnabled: true, command: 'cat', privileged: true),
        containerTemplate(name: 'gradle',
                        image: 'gradle:jdk21',
                        ttyEnabled: true,
                        command: 'cat',
                        envVars: [
                            envVar(key: 'DOCKER_HOST', value: 'unix:///run/podman/podman.sock'),
                            envVar(key: 'TESTCONTAINERS_DOCKER_SOCKET_OVERRIDE', value: '/run/podman/podman.sock'),
                            envVar(key: 'TESTCONTAINERS_RYUK_DISABLED', value: 'true')
                        ]),
        containerTemplate(name: 'azure-cli', image: 'hiondal/azure-kubectl:latest', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'envsubst', image: "hiondal/envsubst", command: 'sleep', args: '1h')
    ],
    volumes: [
        emptyDirVolume(mountPath: '/home/gradle/.gradle', memory: false),
        emptyDirVolume(mountPath: '/root/.azure', memory: false),
        emptyDirVolume(mountPath: '/run/podman', memory: false)
    ]
) {
    node(PIPELINE_ID) {
        def props
        def imageTag = getImageTag()
        def manifest = "deploy.yaml"
        def namespace
        def services = ['auth', 'email']

        stage("Get Source") {
            checkout scm
            props = readProperties file: "deployment/deploy_env_vars"
            namespace = "${props.namespace}"
        }

        stage("Setup AKS") {
            container('azure-cli') {
                withCredentials([azureServicePrincipal('azure-credentials')]) {
                    sh """
                        az login --service-principal -u \$AZURE_CLIENT_ID -p \$AZURE_CLIENT_SECRET -t \$AZURE_TENANT_ID
                        az aks get-credentials --resource-group ictcoe-edu --name ${props.teamid}-aks --overwrite-existing
                        kubectl create namespace ${namespace} --dry-run=client -o yaml | kubectl apply -f -
                    """
                }
            }
        }

        stage('Build Applications & SonarQube Analysis') {
            container('podman') {
                sh 'podman system service -t 0 unix:///run/podman/podman.sock & sleep 2'
            }

            container('gradle') {
                def testContainersConfig = '''docker.client.strategy=org.testcontainers.dockerclient.UnixSocketClientProviderStrategy
docker.host=unix:///run/podman/podman.sock
ryuk.container.privileged=true
testcontainers.reuse.enable=true'''

                sh """
                    # TestContainers 설정
                    mkdir -p auth/src/test/resources email/src/test/resources
                    echo '${testContainersConfig}' > auth/src/test/resources/testcontainers.properties
                    echo '${testContainersConfig}' > email/src/test/resources/testcontainers.properties
                    # echo '${testContainersConfig}' > mock/src/test/resources/testcontainers.properties
                    # echo '${testContainersConfig}' > stats/src/test/resources/testcontainers.properties
                """

                // withSonarQubeEnv('SonarQube') {
                //     sh """
                //         chmod +x gradlew

                //         # 빌드 실행
                //         ./gradlew :auth:build :email:build -x test

                //         # Auth 서비스
                //         ./gradlew :auth:test :auth:jacocoTestReport :auth:sonar \
                //             -Dsonar.projectKey=email-auth \
                //             -Dsonar.projectName=email-auth \
                //             -Dsonar.java.binaries=build/classes/java/main \
                //             -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                //             -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**

                //         # Email 서비스
                //         ./gradlew :email:test :email:jacocoTestReport :email:sonar \
                //             -Dsonar.projectKey=email-email \
                //             -Dsonar.projectName=email-email \
                //             -Dsonar.java.binaries=build/classes/java/main \
                //             -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml \
                //             -Dsonar.exclusions=**/config/**,**/entity/**,**/dto/**,**/*Application.class,**/exception/**
                //     """
                // }
            }
        }

        // stage('Quality Gate') {
        //     timeout(time: 10, unit: 'MINUTES') {
        //         def qg = waitForQualityGate()
        //         if (qg.status != 'OK') {
        //             error "Pipeline aborted due to quality gate failure: ${qg.status}"
        //         }
        //     }
        // }

        stage('Build & Push Images') {
            container('podman') {
                withCredentials([usernamePassword(
                    credentialsId: 'acr-credentials',
                    usernameVariable: 'USERNAME',
                    passwordVariable: 'PASSWORD'
                )]) {
                    sh "podman login ${props.registry} --username \$USERNAME --password \$PASSWORD"

                    // Auth 서비스 특별 처리
                    sh """
                        podman build \
                            --build-arg BUILD_LIB_DIR="auth/build/libs" \
                            --build-arg ARTIFACTORY_FILE="auth-service.jar" \
                            -f deployment/container/Dockerfile \
                            -t ${props.registry}/${props.image_org}/auth:${imageTag} .

                        podman push ${props.registry}/${props.image_org}/auth:${imageTag}
                    """

                    // Email 서비스
                    sh """
                        podman build \
                            --build-arg BUILD_LIB_DIR="email/build/libs" \
                            --build-arg ARTIFACTORY_FILE="email-service.jar" \
                            -f deployment/container/Dockerfile \
                            -t ${props.registry}/${props.image_org}/email:${imageTag} .

                        podman push ${props.registry}/${props.image_org}/email:${imageTag}
                    """

                    // Mock 서비스
                    sh """
                        podman build \
                            --build-arg BUILD_LIB_DIR="mock/build/libs" \
                            --build-arg ARTIFACTORY_FILE="mock-service.jar" \
                            -f deployment/container/Dockerfile \
                            -t ${props.registry}/${props.image_org}/mock:${imageTag} .

                        podman push ${props.registry}/${props.image_org}/mock:${imageTag}
                    """

                    // Staticstic 서비스
                    sh """
                        podman build \
                            --build-arg BUILD_LIB_DIR="stats/build/libs" \
                            --build-arg ARTIFACTORY_FILE="stats-service.jar" \
                            -f deployment/container/Dockerfile \
                            -t ${props.registry}/${props.image_org}/stats:${imageTag} .

                        podman push ${props.registry}/${props.image_org}/estatsmail:${imageTag}
                    """
                }
            }
        }

        stage('Generate & Apply Manifest') {
            container('envsubst') {
                sh """
                    export namespace=${namespace}
                    export allowed_origins=${props.allowed_origins}
                    export jwt_secret_key=${props.jwt_secret_key}
                    export postgres_user=${props.postgres_user}
                    export postgres_password=${props.postgres_password}
                    export mongodb_user=${props.mongodb_user}
                    export mongodb_password=${props.mongodb_password}
                    export azure_servicebus_connection_string=${props.azure_servicebus_connection_string}
                    export azure_storage_connection_string=${props.azure_storage_connection_string}
                    export replicas=${props.replicas}
                    export resources_requests_cpu=${props.resources_requests_cpu}
                    export resources_requests_memory=${props.resources_requests_memory}
                    export resources_limits_cpu=${props.resources_limits_cpu}
                    export resources_limits_memory=${props.resources_limits_memory}

                    # 이미지 경로 환경변수 설정
                    export auth_image_path=${props.registry}/${props.image_org}/auth:${imageTag}
                    export email_image_path=${props.registry}/${props.image_org}/email:${imageTag}
                    export mock_image_path=${props.registry}/${props.image_org}/mock:${imageTag}
                    export stats_image_path=${props.registry}/${props.image_org}/stats:${imageTag}

                    # manifest 생성
                    envsubst < deployment/${manifest}.template > deployment/${manifest}
                    cat deployment/${manifest}
                """
            }

            container('azure-cli') {
                sh """
                    kubectl apply -f deployment/${manifest}

                    echo "Waiting for deployments to be ready..."
                    kubectl -n ${namespace} wait --for=condition=available deployment/auth --timeout=300s
                    kubectl -n ${namespace} wait --for=condition=available deployment/email --timeout=300s
                    kubectl -n ${namespace} wait --for=condition=available deployment/mock --timeout=300s
                    kubectl -n ${namespace} wait --for=condition=available deployment/stats --timeout=300s
                """
            }
        }
    }
}