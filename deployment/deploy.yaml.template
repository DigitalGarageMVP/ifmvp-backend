# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: common-config
  namespace: ${namespace}
data:
  ALLOWED_ORIGINS: ${allowed_origins}
  JPA_DDL_AUTO: update
  JPA_SHOW_SQL: 'true'
  LOG_LEVEL: DEBUG
  LOG_LEVEL_SECURITY: INFO
  MONGODB_DB: emailviews
  MONGODB_PORT: '27017'
  POSTGRES_DB: authdb
  POSTGRES_PORT: '5432'
  POSTGRES_COMMAND_DB: emaildb
  AZURE_CONTAINER_ATTACHMENTS: email-attachments
  AZURE_QUEUE_CLICK_EVENTS: attachment-click-events
  AZURE_QUEUE_EMAIL_EVENTS: email-events
  AZURE_QUEUE_OPEN_EVENTS: email-open-events
  MOCK_DELIVERY_URL: http://mock-service:80

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-config
  namespace: ${namespace}
data:
  JWT_ACCESS_TOKEN_VALIDITY: '3600000'
  JWT_REFRESH_TOKEN_VALIDITY: '86400000'
  SERVER_PORT: '8080'
  SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-ifmvp-auth-postgresql:5432/authdb

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: email-config
  namespace: ${namespace}
data:
  SERVER_PORT: '8081'
  SPRING_DATASOURCES_COMMAND_JDBCURL: jdbc:postgresql://postgres-ifmvp-email-postgresql-primary:5432/emaildb
  SPRING_DATASOURCES_QUERY_JDBCURL: jdbc:postgresql://postgres-ifmvp-email-postgresql-read:5432/emaildb
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mock-config
  namespace: ${namespace}
data:
  SERVER_PORT: '8082'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: stats-config
  namespace: ${namespace}
data:
  SERVER_PORT: '8083'
  SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-ifmvp-stats-postgresql:5432/statsdb

---
# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: common-secret
  namespace: ${namespace}
stringData:
  AZURE_QUEUE_CLICK_EVENTS: attachment-click-events
  AZURE_QUEUE_EMAIL_EVENTS: email-events
  AZURE_QUEUE_OPEN_EVENTS: email-open-events
  AZURE_SERVICEBUS_CONNECTION_STRING: ${azure_servicebus_connection_string}
  AZURE_SERVICEBUS_QUEUE_NAME: email-service-queue
  AZURE_STORAGE_CONNECTION_STRING: ${azure_storage_connection_string}
  JWT_SECRET_KEY: ${jwt_secret_key}
  MONGODB_PASSWORD: ${mongodb_password}
  MONGODB_USER: ${mongodb_user}
  POSTGRES_PASSWORD: ${postgres_password}
  POSTGRES_USER: ${postgres_user}
  SPRING_DATASOURCE_COMMAND_PASSWORD: ${postgres_password}
  SPRING_DATASOURCE_COMMAND_USERNAME: ${postgres_user}
  SPRING_DATASOURCE_PASSWORD: ${postgres_password}
  SPRING_DATASOURCE_QUERY_PASSWORD: ${postgres_password}
  SPRING_DATASOURCE_QUERY_USERNAME: ${postgres_user}
  SPRING_DATASOURCE_USERNAME: ${postgres_user}
type: Opaque

---
# Deployments
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-deployment
  labels:
    app: auth
  namespace: ${namespace}
spec:
  replicas: ${replicas}
  selector:
    matchLabels:
      app: auth
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: auth
    spec:
      containers:
      - name: auth-container
        image: ${auth_image_path}
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: common-config
        - configMapRef:
            name: auth-config
        - secretRef:
            name: common-secret
        resources:
          requests:
            cpu: ${resources_requests_cpu}
            memory: ${resources_requests_memory}
          limits:
            cpu: ${resources_limits_cpu}
            memory: ${resources_limits_memory}
        ports:
        - containerPort: 8080
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: email-deployment
  labels:
    app: email
  namespace: ${namespace}
spec:
  replicas: ${replicas}
  selector:
    matchLabels:
      app: email
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: email
    spec:
      containers:
      - name: email-container
        image: ${email_image_path}
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: common-config
        - configMapRef:
            name: email-config
        - secretRef:
            name: common-secret
        resources:
          requests:
            cpu: ${resources_requests_cpu}
            memory: ${resources_requests_memory}
          limits:
            cpu: ${resources_limits_cpu}
            memory: ${resources_limits_memory}
        ports:
        - containerPort: 8081
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mock-deployment
  labels:
    app: mock
  namespace: ${namespace}
spec:
  replicas: ${replicas}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: mock
  template:
    metadata:
      labels:
        app: mock
    spec:
      containers:
      - name: mock-container
        image: ${mock_image_path}
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: common-config
        - configMapRef:
            name: mock-config
        - secretRef:
            name: common-secret
        resources:
          requests:
            cpu: ${resources_requests_cpu}
            memory: ${resources_requests_memory}
          limits:
            cpu: ${resources_limits_cpu}
            memory: ${resources_limits_memory}
        ports:
        - containerPort: 8082
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8082
          initialDelaySeconds: 30
          failureThreshold: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8082
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stats-deployment
  labels:
    app: stats
  namespace: ${namespace}
spec:
  replicas: ${replicas}
  selector:
    matchLabels:
      app: stats
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: stats
    spec:
      containers:
      - name: stats-container
        image: ${stats_image_path}
        imagePullPolicy: Always
        envFrom:
        - configMapRef:
            name: common-config
        - configMapRef:
            name: stats-config
        - secretRef:
            name: common-secret
        resources:
          requests:
            cpu: ${resources_requests_cpu}
            memory: ${resources_requests_memory}
          limits:
            cpu: ${resources_limits_cpu}
            memory: ${resources_limits_memory}
        ports:
        - containerPort: 8083
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8083
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8083
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8083
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

---
# Services
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: ${namespace}
spec:
  selector:
    app: auth
  ports:
  - port: 80
    targetPort: 8080
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: email-service
  namespace: ${namespace}
spec:
  selector:
    app: email
  ports:
  - port: 80
    targetPort: 8081
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: mock-service
  namespace: ${namespace}
spec:
  selector:
    app: mock
  ports:
  - port: 80
    targetPort: 8082
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  name: stats-service
  namespace: ${namespace}
spec:
  selector:
    app: stats
  ports:
  - port: 80
    targetPort: 8083
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ifmvp-ingress
  namespace: ${namespace}
  annotations:
    kubernetes.io/ingress.class: nginx
spec:
  rules:
  - http:
      paths:
      - path: /api/auth
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 80
      - path: /api/emails
        pathType: Prefix
        backend:
          service:
            name: email-service
            port:
              number: 80
      - path: /api/attachments
        pathType: Prefix
        backend:
          service:
            name: email-service
            port:
              number: 80
      - path: /api/mock
        pathType: Prefix
        backend:
          service:
            name: mock-service
            port:
              number: 80
      - path: /api/statistics
        pathType: Prefix
        backend:
          service:
            name: stats-service
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: auth-hpa
  namespace: if-ifmvp-ns
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: auth-deployment
  minReplicas: 2
  maxReplicas: 4
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 85
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 90
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: email-hpa
  namespace: if-ifmvp-ns
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: email-deployment
  minReplicas: 2
  maxReplicas: 6
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 85
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 85
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
        - type: Pods
          value: 2
          periodSeconds: 60

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mock-hpa
  namespace: if-ifmvp-ns
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mock-deployment
  minReplicas: 2
  maxReplicas: 4
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 85
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 85
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: stats-hpa
  namespace: if-ifmvp-ns
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: stats-deployment
  minReplicas: 2
  maxReplicas: 6
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 85
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 85
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
      policies:
        - type: Pods
          value: 1
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
        - type: Pods
          value: 2
          periodSeconds: 60
          